{"events":[],"handlers":[{"code":"--- Dual Universe Schematics Monitor v2.1\r\n--- Created by Zrips.\r\n--- DateTime: 2022-10-06 11:03\r\n--- Updated by Vtreka#1337\r\n--- LastUpdate: 2023-03-11 06:37\r\n\r\nsystem.print(\" --- Schematics Bank v2.1 ---\")\r\n\r\nmceil = math.ceil\r\nsmatch = string.match\r\nssub = string.sub\r\n\r\nlocal concat = table.concat\r\nlocal function internalSerialize(table, tC, t)\r\n    t[tC] = \"{\"\r\n    tC = tC + 1\r\n    if #table == 0 then\r\n        local hasValue = false\r\n        for key, value in pairs(table) do\r\n            hasValue = true\r\n            local keyType = type(key)\r\n            if keyType == \"string\" then\r\n                t[tC] = key .. \"=\"\r\n            elseif keyType == \"number\" then\r\n                t[tC] = \"[\" .. key .. \"]=\"\r\n            elseif keyType == \"boolean\" then\r\n                t[tC] = \"[\" .. tostring(key) .. \"]=\"\r\n            else\r\n                t[tC] = \"notsupported=\"\r\n            end\r\n            tC = tC + 1\r\n\r\n            local check = type(value)\r\n            if check == \"table\" then\r\n                tC = internalSerialize(value, tC, t)\r\n            elseif check == \"string\" then\r\n                t[tC] = '\"' .. value .. '\"'\r\n            elseif check == \"number\" then\r\n                t[tC] = value\r\n            elseif check == \"boolean\" then\r\n                t[tC] = tostring(value)\r\n            else\r\n                t[tC] = '\"Not Supported\"'\r\n            end\r\n            t[tC + 1] = \",\"\r\n            tC = tC + 2\r\n        end\r\n        if hasValue then\r\n            tC = tC - 1\r\n        end\r\n    else\r\n        for i = 1, #table do\r\n            local value = table[i]\r\n            local check = type(value)\r\n            if check == \"table\" then\r\n                tC = internalSerialize(value, tC, t)\r\n            elseif check == \"string\" then\r\n                t[tC] = '\"' .. value .. '\"'\r\n            elseif check == \"number\" then\r\n                t[tC] = value\r\n            elseif check == \"boolean\" then\r\n                t[tC] = tostring(value)\r\n            else\r\n                t[tC] = '\"Not Supported\"'\r\n            end\r\n            t[tC + 1] = \",\"\r\n            tC = tC + 2\r\n        end\r\n        tC = tC - 1\r\n    end\r\n    t[tC] = \"}\"\r\n    return tC\r\nend\r\n\r\nfunction serialize(value)\r\n    local t = {}\r\n    local check = type(value)\r\n\r\n    if check == \"table\" then\r\n        internalSerialize(value, 1, t)\r\n    elseif check == \"string\" then\r\n        return '\"' .. value .. '\"'\r\n    elseif check == \"number\" then\r\n        return value\r\n    elseif check == \"boolean\" then\r\n        return tostring(value)\r\n    else\r\n        return '\"Not Supported\"'\r\n    end\r\n\r\n    return concat(t)\r\nend\r\n\r\nfunction deserialize(s)\r\n    return load(\"return \" .. s)()\r\nend","filter":{"args":[],"signature":"onStart()","slotKey":"-5"},"key":"0"},{"code":"update()","filter":{"args":[{"value":"update"}],"signature":"onTimer(timerid)","slotKey":"-1"},"key":"0"},{"code":"if databank ~= nil then\r\n    databank.setStringValue(\"options\", json.encode(options))\r\nend","filter":{"args":[],"signature":"onStop()","slotKey":"-1"},"key":"0"},{"code":"--[[ LUA PARAMETERS ]]\r\nuseDatabankValues = true --export: If checked and if values were saved in databank, parmaters will be loaded from the databank, if not, following ones will be used\r\ncheckSchematicsContainer = true --export: Should we indicate if linked container is set to be used as schematics container\r\nlocal Localize = false --export: When enabled we will localize schematic names\r\n\r\nscreens = {}\r\ndatabank = nil\r\ncontainer = nil\r\nrequestingUpdateContent = false\r\n\r\noptions = {}\r\noptions.checkSchematicsContainer = checkSchematicsContainer\r\noptions.Localize = Localize\r\n\r\nmfloor = math.floor\r\nmround = math.round\r\nmabs = math.abs\r\n\r\nlinkedToSchemContainer = false\r\n\r\nfunction round(number, decimals)\r\n    local power = 10 ^ decimals\r\n    return mfloor(mfloor(number * power)) / power\r\nend\r\n\r\nfunction getDirection(element)\r\n    local position = \"vl\"\r\n    if mabs(element.getUp()[1]) > mabs(element.getUp()[2]) and mabs(element.getUp()[1]) > mabs(element.getUp()[3]) then\r\n        if element.getForward()[3] < 0 then\r\n            position = \"fd\"\r\n        else\r\n            position = \"fu\"\r\n        end\r\n    else\r\n        if mabs(element.getUp()[2]) > mabs(element.getUp()[3]) then\r\n            if element.getUp()[2] > 0 then\r\n                position = \"vl\"\r\n            else\r\n                position = \"vr\"\r\n            end\r\n        else\r\n            if element.getUp()[3] > 0 then\r\n                position = \"hu\"\r\n            else\r\n                position = \"hd\"\r\n            end\r\n        end\r\n    end\r\n    return position\r\nend\r\n\r\nfor key, value in pairs(unit) do\r\n    if type(value) == \"table\" and type(value.export) == \"table\" then\r\n        if value.getClass then\r\n            if value.getClass() == \"ScreenUnit\" then\r\n                local screenNumber = 1\r\n                if string.match(value.getName():lower(), \"screen_\") ~= nil then\r\n                    screenNumber = tonumber(string.sub(value.getName():lower(), 8, 8))\r\n                end\r\n\r\n                screens[#screens + 1] = { screen = value, slot = key, sn = screenNumber, dir = getDirection(value)}\r\n                value.activate()\r\n            elseif value.getClass() == \"CoreUnitStatic\" or value.getClass() == \"CoreUnitSpace\" or value.getClass() == \"CoreUnitDynamic\" then\r\n                core = value\r\n            elseif value.getClass():lower() == \"databankunit\" then\r\n                databank = value\r\n            elseif string.match(value.getClass():lower(), \"container\") then\r\n                container = value\r\n\r\n                if construct.getSchematicContainerId() == value.getLocalId() then\r\n                    linkedToSchemContainer = true\r\n                end\r\n            end\r\n        end\r\n    end\r\nend\r\n\r\nif #screens == 0 then\r\n    system.print(\"No screen detected\")\r\nelse\r\n    local plural = \"\"\r\n    if #screens > 1 then plural = \"s\" end\r\n    system.print(#screens .. \" screen\" .. plural .. \" connected\")\r\nend\r\n\r\nif not container then\r\n    system.print(\"Container NOT found\")\r\nend\r\n\r\nif core == 0 then\r\n    system.print(\"No core detected\") else system.print(\"Core connected\")\r\nend\r\n\r\nif not databank then\r\n    system.print(\"No Databank Detected\")\r\nelse\r\n    system.print(\"Databank Connected\")\r\n    if (databank.hasKey(\"options\")) and (useDatabankValues == true) then\r\n        local db_options = json.decode(databank.getStringValue(\"options\"))\r\n        if db_options then\r\n            for key, value in pairs(options) do\r\n                if db_options[key] then options[key] = db_options[key] end\r\n            end\r\n            system.print(\"Options Loaded From Databank\")\r\n        else\r\n            system.print(\"No parameters saved to Databank. Restart the Programming Board\")\r\n        end\r\n    else\r\n        system.print(\"Options Loaded From LUA Parameters\")\r\n    end\r\nend\r\n\r\nschematics = {}\r\n\r\ntempTier = 0\r\nsubTempTier = 0\r\nScreenNumber = 1\r\n\r\nfunction setTier(tier)\r\n    tempTier = tier\r\nend\r\n\r\nfunction setSubTempTier(tier)\r\n    subTempTier = tier\r\nend\r\n\r\nfunction moveToNextScreen()\r\n    ScreenNumber = ScreenNumber + 1\r\nend\r\n\r\nfunction addSchematic(id, max, priority)\r\n    local item = system.getItem(id)\r\n\r\n    local name = Localize and item.locDisplayName or item.displayName\r\n\r\n    -- English cleanup\r\n    name = name:gsub(\"Schematic Copy\", \"\")\r\n    name = name:gsub(\"Tier \" .. tempTier, \"\")\r\n    name = name:gsub(\"Tier \" .. subTempTier, \"\")\r\n    name = name:gsub(\"Construct Support\", \"\")\r\n    name = name:gsub(\"Core Unit\", \"\")\r\n    name = name:gsub(\"Scrap\", \"\")\r\n\r\n    --German cleanup\r\n    name = name:gsub(\"Stufe\", \"\")\r\n    name = name:gsub(\"-\", \" \")\r\n    name = name:gsub(\"Schema\", \"\")\r\n    \r\n    -- French cleanup\r\n    name = name:gsub(\"Copie de schéma \", \"\")\r\n    name = name:gsub(\"de soutien de construct\", \"\")\r\n    name = name:gsub(\"d'unités centrales\", \"\")\r\n    name = name:gsub(\"(de palier)\", \"\")\r\n    name = name:gsub(\"\" .. tempTier, \"\")\r\n\r\n    schematics[#schematics + 1] = { id = id, name = name, max = max, tier = tempTier, priority = priority, sn = ScreenNumber }\r\nend\r\n\r\nfunction formatScript(data, horizontal, inverted)\r\n    return [[---\r\n--- Created by Zrips#9691.\r\n--- DateTime: 2022-10-05 15:12\r\n--- Updated by Vtreka#1337\r\n--- DateTime: 2023-02-26 00:48\r\n\r\nfont = loadFont('Play', 25)\r\nsmallFont = loadFont('Play', 15)\r\nmidFont = loadFont('Play', 20)\r\ntinyFont = loadFont('Play', 10)\r\n\r\nif not init then\r\n    init = true\r\n\r\n    lastUpdate = getTime()\r\n\r\n    mfloor = math.floor\r\n    mceil = math.ceil\r\n\r\n    lowPriorityColor = { r = 128 / 255, g = 128 / 255, b = 128 / 255 } --export: Low Priority Colour\r\n    cyanColor = { r = 135 / 255, g = 206 / 255, b = 235 / 255 }\r\n    uiSettings = { r = 37 / 255, g = 57 / 255, b = 64 / 255 }\r\n    tier1Color = { r = 255 / 255, g = 255 / 255, b = 255 / 255 } --export: Tier 1 Colour\r\n    tier2Color = { r = 0 / 255, g = 255 / 255, b = 0 / 255 } --export: Tier 2 Colour\r\n    tier3Color = { r = 0 / 255, g = 127 / 255, b = 255 / 255 } --export: Tier 3 Colour\r\n    tier4Color = { r = 255 / 255, g = 0 / 255, b = 255 / 255 } --export: Tier 4 Colour\r\n    tier5Color = { r = 255 / 255, g = 102 / 255, b = 0 / 255 } --export: Tier 5 Colour\r\n    highPriorityColor = { r = 255 / 255, g = 50 / 255, b = 0 / 255 } --export: High Priority Colour\r\n    backgroundColor = { r = 13 / 255, g = 24 / 255, b = 28 / 255 }\r\n    redColor = { r = 254 / 255, g = 69 / 255, b = 0 / 255 }\r\n\r\n    barColorGood = { r = 4 / 255, g = 159 / 255, b = 0 / 255 }\r\n    barColorBad = { r = 177 / 255, g = 80 / 255, b = 0 / 255 }\r\n\r\n    realX, realY = getResolution()\r\n\r\n    barStartY = 40\r\n\r\n    barHeight = 21\r\n    barWidth = 130\r\n    barSpacing = 4\r\n\r\n    barInset = 2\r\n\r\n    sectionSpacing = 20\r\n\r\n    textBarSpacing = 10\r\n\r\n    linkedToSchem = ]] .. tostring(linkedToSchemContainer) .. [[\r\n    horizontal = ]] .. tostring(horizontal) .. [[\r\n    inverted = ]] .. tostring(inverted) .. [[\r\n    blocks = ]] .. data .. [[\r\n   \r\n    -- Inverting\r\n    if not horizontal then\r\n        ry, rx = realX, realY\r\n    else\r\n        rx, ry = realX, realY\r\n\r\n        barHeight = barHeight * 0.52\r\n        barWidth = barWidth * 0.6\r\n        barStartY = barStartY * 0.6\r\n    end\r\n\r\n    function round(number, decimals)\r\n        local power = 10 ^ decimals\r\n        return mfloor(number * power) / power\r\n    end\r\n\r\n    function mixColors(color1, color2, percent)\r\n        local inverse_percent = 1 - percent\r\n        local redPart = color2.r * percent + color1.r * inverse_percent\r\n        local greenPart = color2.g * percent + color1.g * inverse_percent\r\n        local bluePart = color2.b * percent + color1.b * inverse_percent\r\n        return { r = redPart, g = greenPart, b = bluePart };\r\n    end\r\n\r\n    function round(number, decimals)\r\n        local power = 10 ^ decimals\r\n        return mceil(number * power) / power\r\n    end\r\nend\r\n\r\nlocal layer = createLayer()\r\nif not horizontal then\r\n    setLayerOrigin(layer, realX / 2, realY / 2)\r\n\r\n    if inverted then\r\n        setLayerTranslation(layer, (realY - realX) / 2, -realY / 3)\r\n        setLayerRotation(layer, -1.5708)\r\n    else\r\n        setLayerTranslation(layer, (realX - realY) / 2, realY / 3)\r\n        setLayerRotation(layer, 1.5708)\r\n    end\r\n\r\n    font = loadFont('Play', 25)\r\n    smallFont = loadFont('Play', 15)\r\n    midFont = loadFont('Play', 20)\r\n    tinyFont = loadFont('Play', 10)\r\n\r\nelse\r\n    if inverted then\r\n        setLayerOrigin(layer, realX / 2, realY / 2)\r\n        setLayerRotation(layer, 3.14159)\r\n    end\r\n    font = loadFont('Play', 20)\r\n    smallFont = loadFont('Play', 12)\r\n    midFont = loadFont('Play', 12)\r\n    tinyFont = loadFont('Play', 10)\r\nend\r\n\r\nsetBackgroundColor(backgroundColor.r, backgroundColor.g, backgroundColor.b)\r\n\r\nlocal pos = 0\r\nlocal localPos = 1\r\n\r\nlocal blockWidth = rx\r\nif horizontal then\r\n    blockWidth = blockWidth / #blocks\r\nend\r\n\r\nfunction getColor(material, progress)\r\n    if material.p then\r\n        if progress < 100 and material.max > 0 then\r\n            return highPriorityColor\r\n        end\r\n        return tier1Color\r\n    elseif material.p == nil and progress < 100 and material.max > 0 then\r\n        return tier1Color\r\n    end\r\n    return lowPriorityColor\r\nend\r\n\r\nfunction drawLine(material, x, y)\r\n\r\n    local alpha = 0.8\r\n    if localPos % 2 == 0 then\r\n        alpha = 0.1\r\n    end\r\n\r\n    local rx = x + blockWidth\r\n\r\n    setNextFillColor(layer, uiSettings.r, uiSettings.g, uiSettings.b, alpha)\r\n    setNextStrokeColor(layer, 0, 0, 0, 0)\r\n    setNextStrokeWidth(layer, 0)\r\n    addBox(layer, x + textBarSpacing * 2, y, blockWidth - (textBarSpacing * 4), barHeight)\r\n\r\n    local progress = 0\r\n    if material.max > 0 then\r\n        progress = mfloor(material.volume * 100 / material.max)\r\n    end\r\n\r\n    if progress > 100 then\r\n        progress = 100\r\n    end\r\n\r\n    local width = progress * barWidth / 100\r\n\r\n    setNextTextAlign(layer, AlignH_Left, AlignV_Middle)\r\n    local textX = x + (textBarSpacing * 2)\r\n    local barX = rx - (textBarSpacing * 2) - barWidth\r\n    local secBarX = barX + 2\r\n    local volumeX = barX - textBarSpacing\r\n    local percentX = barX + (barWidth / 2)\r\n\r\n    alpha = 1\r\n\r\n    -- Material name section\r\n\r\n    local priorityColor = getColor(material, progress)\r\n    setNextFillColor(layer, priorityColor.r, priorityColor.g, priorityColor.b, 0.5)\r\n\r\n    if material.p and progress < 100 and material.max > 0 then\r\n        setNextFillColor(layer, priorityColor.r, priorityColor.g, priorityColor.b, 0.5)\r\n    elseif material.tier == 2 or material.tier == 11 then\r\n        setNextFillColor(layer, tier2Color.r, tier2Color.g, tier2Color.b, 0.5)\r\n    elseif material.tier == 3 or material.tier == 12 then\r\n        setNextFillColor(layer, tier3Color.r, tier3Color.g, tier3Color.b, 0.5)    \r\n    elseif material.tier == 4 or material.tier == 13 then\r\n        setNextFillColor(layer, tier4Color.r, tier4Color.g, tier4Color.b, 0.5)\r\n    elseif material.tier == 5 then\r\n        setNextFillColor(layer, tier5Color.r, tier5Color.g, tier5Color.b, 0.5)\r\n    end\r\n\r\n    addText(layer, midFont, material.name, textX, y + (barHeight / 2))\r\n\r\n    -- Bar background section\r\n    setNextFillColor(layer, uiSettings.r, uiSettings.g, uiSettings.b, alpha)\r\n\r\n    if horizontal then\r\n        setNextStrokeColor(layer, cyanColor.r, cyanColor.g, cyanColor.b, 0.5)\r\n    else\r\n        setNextStrokeColor(layer, cyanColor.r, cyanColor.g, cyanColor.b, alpha)\r\n    end\r\n    setNextStrokeWidth(layer, 0.1)\r\n    addBox(layer, barX, y, barWidth, barHeight)\r\n\r\n    if progress > 0 then\r\n        -- Dynamic bar section\r\n        local fillColor = mixColors(barColorBad, barColorGood, progress / 100)\r\n        setNextFillColor(layer, fillColor.r, fillColor.g, fillColor.b, 1)\r\n        setNextStrokeColor(layer, 0, 0, 0, 0)\r\n        addBox(layer, secBarX, y + barInset, width - (barInset * 2), barHeight - (barInset * 2))\r\n    end\r\n\r\n    -- Percentage section\r\n    setNextTextAlign(layer, AlignH_Center, AlignV_Middle)\r\n    setNextStrokeColor(layer, 0.1, 0.1, 0.1, 0.8)\r\n    if horizontal then\r\n        setNextStrokeWidth(layer, 0.8)\r\n    else\r\n        setNextStrokeWidth(layer, alpha)\r\n    end\r\n    setNextFillColor(layer, priorityColor.r, priorityColor.g, priorityColor.b, 1)\r\n    addText(layer, smallFont, progress .. \"%\", percentX, y + (barHeight / 2))\r\n\r\n    -- Volume section\r\n    setNextFillColor(layer, priorityColor.r, priorityColor.g, priorityColor.b, 0.5)\r\n\r\n    setNextTextAlign(layer, AlignH_Right, AlignV_Middle)\r\n    setNextStrokeColor(layer, 0.1, 0.1, 0.1, 0.8)\r\n    setNextStrokeWidth(layer, 0.5)\r\n    addText(layer, smallFont, mfloor(material.volume) .. \" / \" .. mfloor(material.max), volumeX, y + (barHeight / 2))\r\nend\r\n\r\nlocal offset = 0\r\nlocal prevTier = 0\r\nlocal sectionStartY = 0\r\n\r\nfunction drawBorder(x)\r\n\r\n    setNextFillColor(layer, 0, 0, 0, 0)\r\n    if linkedToSchem then\r\n        setNextStrokeColor(layer, cyanColor.r, cyanColor.g, cyanColor.b, 0.5)\r\n    else\r\n        setNextStrokeColor(layer, redColor.r, redColor.g, redColor.b, 0.5)\r\n    end\r\n    setNextStrokeWidth(layer, 0.01)\r\n    addBox(layer, x + (barSpacing * 4), sectionStartY - barHeight, blockWidth - (barSpacing * 8), barStartY + (pos * (barHeight + barSpacing)) + offset - sectionStartY - (barSpacing * 2))\r\nend\r\n\r\nfunction processBlock(bn, block)\r\n\r\n    local lx = (bn - 1) * blockWidth\r\n\r\n    for id, schematic in ipairs(block) do\r\n\r\n        if prevTier ~= schematic.tier then\r\n            offset = offset + (barSpacing * 1.8) + barHeight\r\n            prevTier = schematic.tier\r\n            localPos = 1\r\n\r\n            if sectionStartY > 0 then\r\n                drawBorder((bn - 1) * blockWidth)\r\n            end\r\n\r\n        sectionStartY = barStartY + (pos * (barHeight + barSpacing)) + offset\r\n\r\n        local tierName = \"Tier \" .. schematic.tier\r\n\r\n        if schematic.tier == 1 then\r\n            setNextTextAlign(layer, AlignH_Center, AlignV_Middle)\r\n            setNextFillColor(layer, tier1Color.r, tier1Color.g, tier1Color.b, 1)\r\n            addText(layer, midFont, tierName, lx + (blockWidth / 2), barStartY + (pos * (barHeight + barSpacing)) + offset - (barHeight / 2))    \r\n        elseif schematic.tier == 2 then\r\n            setNextTextAlign(layer, AlignH_Center, AlignV_Middle)\r\n            setNextFillColor(layer, tier2Color.r, tier2Color.g, tier2Color.b, 0.5)\r\n            addText(layer, midFont, tierName, lx + (blockWidth / 2), barStartY + (pos * (barHeight + barSpacing)) + offset - (barHeight / 2))\r\n        elseif schematic.tier == 3 then\r\n            setNextTextAlign(layer, AlignH_Center, AlignV_Middle)\r\n            setNextFillColor(layer, tier3Color.r, tier3Color.g, tier3Color.b, 1)\r\n            addText(layer, midFont, tierName, lx + (blockWidth / 2), barStartY + (pos * (barHeight + barSpacing)) + offset - (barHeight / 2))\r\n        elseif schematic.tier == 4 then\r\n            setNextTextAlign(layer, AlignH_Center, AlignV_Middle)\r\n            setNextFillColor(layer, tier4Color.r, tier4Color.g, tier4Color.b, 0.5)\r\n            addText(layer, midFont, tierName, lx + (blockWidth / 2), barStartY + (pos * (barHeight + barSpacing)) + offset - (barHeight / 2))\r\n        elseif schematic.tier == 5 then\r\n            setNextTextAlign(layer, AlignH_Center, AlignV_Middle)\r\n            setNextFillColor(layer, tier5Color.r, tier5Color.g, tier5Color.b, 1)\r\n            addText(layer, midFont, tierName, lx + (blockWidth / 2), barStartY + (pos * (barHeight + barSpacing)) + offset - (barHeight / 2))\r\n        elseif schematic.tier == 6 then\r\n            tierName = \"Construct Support\"\r\n            setNextTextAlign(layer, AlignH_Center, AlignV_Middle)\r\n            setNextFillColor(layer, tier1Color.r, tier1Color.g, tier1Color.b, 1)\r\n            addText(layer, midFont, tierName, lx + (blockWidth / 2), barStartY + (pos * (barHeight + barSpacing)) + offset - (barHeight / 2))\r\n        elseif schematic.tier == 7 then\r\n            tierName = \"Core Unit\"\r\n            setNextTextAlign(layer, AlignH_Center, AlignV_Middle)\r\n            setNextFillColor(layer, tier1Color.r, tier1Color.g, tier1Color.b, 1)\r\n            addText(layer, midFont, tierName, lx + (blockWidth / 2), barStartY + (pos * (barHeight + barSpacing)) + offset - (barHeight / 2))\r\n        elseif schematic.tier == 8 then\r\n            tierName = \"Deployables\"\r\n            setNextTextAlign(layer, AlignH_Center, AlignV_Middle)\r\n            setNextFillColor(layer, tier1Color.r, tier1Color.g, tier1Color.b, 1)\r\n            addText(layer, midFont, tierName, lx + (blockWidth / 2), barStartY + (pos * (barHeight + barSpacing)) + offset - (barHeight / 2))\r\n        elseif schematic.tier == 9 then\r\n            tierName = \"Fuel\"\r\n            setNextTextAlign(layer, AlignH_Center, AlignV_Middle)\r\n            setNextFillColor(layer, tier1Color.r, tier1Color.g, tier1Color.b, 1)\r\n            addText(layer, midFont, tierName, lx + (blockWidth / 2), barStartY + (pos * (barHeight + barSpacing)) + offset - (barHeight / 2))\r\n        elseif schematic.tier == 10 then\r\n            tierName = \"Scrap\"\r\n            setNextTextAlign(layer, AlignH_Center, AlignV_Middle)\r\n            setNextFillColor(layer, tier1Color.r, tier1Color.g, tier1Color.b, 1)\r\n            addText(layer, midFont, tierName, lx + (blockWidth / 2), barStartY + (pos * (barHeight + barSpacing)) + offset - (barHeight / 2))\r\n        elseif schematic.tier == 11 then\r\n            tierName = \"Tier 2 Ammo\"\r\n            setNextTextAlign(layer, AlignH_Center, AlignV_Middle)\r\n            setNextFillColor(layer, tier2Color.r, tier2Color.g, tier2Color.b, 0.5)\r\n            addText(layer, midFont, tierName, lx + (blockWidth / 2), barStartY + (pos * (barHeight + barSpacing)) + offset - (barHeight / 2))\r\n        elseif schematic.tier == 12 then\r\n            tierName = \"Tier 3 Ammo\"\r\n            setNextTextAlign(layer, AlignH_Center, AlignV_Middle)\r\n            setNextFillColor(layer, tier3Color.r, tier3Color.g, tier3Color.b, 1)\r\n            addText(layer, midFont, tierName, lx + (blockWidth / 2), barStartY + (pos * (barHeight + barSpacing)) + offset - (barHeight / 2))\r\n        elseif schematic.tier == 13 then\r\n            tierName = \"Tier 4 Ammo\"\r\n            setNextTextAlign(layer, AlignH_Center, AlignV_Middle)\r\n            setNextFillColor(layer, tier4Color.r, tier4Color.g, tier4Color.b, 0.5)\r\n            addText(layer, midFont, tierName, lx + (blockWidth / 2), barStartY + (pos * (barHeight + barSpacing)) + offset - (barHeight / 2))\r\n        end\r\n    end\r\n\r\n        drawLine(schematic, (bn - 1) * blockWidth, barStartY + (pos * (barHeight + barSpacing)) + offset)\r\n        pos = pos + 1\r\n        localPos = localPos + 1\r\n    end\r\nend\r\n\r\nif horizontal then\r\n    for ids, block in ipairs(blocks) do\r\n        offset = 0\r\n        prevTier = 0\r\n        sectionStartY = 0\r\n\r\n        pos = 0\r\n        localPos = 1\r\n        processBlock(ids, block)\r\n        offset = offset + (barSpacing * 1.8) + barHeight\r\n        drawBorder((ids - 1) * blockWidth)\r\n    end\r\nelse\r\n    processBlock(1, blocks)\r\n    offset = offset + (barSpacing * 1.8) + barHeight\r\n    drawBorder(0)\r\nend\r\n\r\nsetNextFillColor(layer, tier1Color.r, tier1Color.g, tier1Color.b, 0)\r\nsetNextStrokeColor(layer, cyanColor.r, cyanColor.g, cyanColor.b, 1)\r\nsetNextStrokeWidth(layer, 0.1)\r\naddBox(layer, 10, 10, rx - 20, ry - 20)\r\n\r\nif lastUpdate + 30 > getTime() then\r\n    setNextFillColor(layer, 1, 1, 1, 0.5)\r\n    setNextTextAlign(layer, AlignH_Center, AlignV_Middle)\r\n    if horizontal then\r\n        addText(layer, midFont, mfloor(30 - (getTime() - lastUpdate)) .. \"s\", 30, 20)\r\n    else\r\n        addText(layer, midFont, mfloor(30 - (getTime() - lastUpdate)) .. \"s\", 35, 30)\r\n    end\r\nend\r\n\r\nlocal textY = 40\r\n\r\nif horizontal then\r\n    textY = 27\r\nend\r\n\r\nif linkedToSchem then\r\n    setNextFillColor(layer, 1, 1, 1, 0.5)\r\nelse\r\n    setNextFillColor(layer, redColor.r, redColor.g, redColor.b, 0.7)\r\nend\r\nsetNextTextAlign(layer, AlignH_Right, AlignV_Baseline)\r\naddText(layer, font, \"Schematics Bank\", rx / 2 + 50, textY)\r\n\r\nsetNextFillColor(layer, 1, 1, 1, 0.5)\r\nsetNextTextAlign(layer, AlignH_Left, AlignV_Baseline)\r\naddText(layer, tinyFont, \"v2.1\", rx / 2 + 55, textY)\r\n\r\nfunction priority(x, y, text, color, alpha)\r\n\r\n    local boxSize = 10\r\n\r\n    setNextFillColor(layer, color.r, color.g, color.b, alpha)\r\n    setNextTextAlign(layer, AlignH_Right, AlignV_Middle)\r\n    addText(layer, smallFont, text, x - boxSize - 5, y)\r\n\r\n    setNextFillColor(layer, color.r, color.g, color.b, alpha)\r\n    setNextStrokeColor(layer, 0, 0, 0, 0)\r\n    addBox(layer, x - boxSize, y - (boxSize / 2), boxSize, boxSize)\r\nend\r\n\r\nfunction addPriorityInfo()\r\n\r\n    if horizontal then\r\n        setNextFillColor(layer, cyanColor.r, cyanColor.g, cyanColor.b, 1)\r\n        setNextTextAlign(layer, AlignH_Center, AlignV_Middle)\r\n        addText(layer, smallFont, \"Priority\", rx - 190, 20)\r\n\r\n        priority(rx - 20, 20, \"Low\", lowPriorityColor, 1)\r\n        priority(rx - 65, 20, \"Normal\", tier1Color, 1)\r\n        priority(rx - 125, 20, \"High\", highPriorityColor, 0.5)\r\n    else\r\n        setNextFillColor(layer, cyanColor.r, cyanColor.g, cyanColor.b, 1)\r\n        setNextTextAlign(layer, AlignH_Center, AlignV_Middle)\r\n        addText(layer, smallFont, \"Priority\", rx - 100, 20)\r\n\r\n        priority(rx - 20, 35, \"Low\", lowPriorityColor, 1)\r\n        priority(rx - 70, 35, \"Normal\", tier1Color, 1)\r\n        priority(rx - 140, 35, \"High\", highPriorityColor, 0.5)\r\n    end\r\nend\r\naddPriorityInfo()\r\n\r\nrequestAnimationFrame(30)]]\r\n\r\nend\r\n\r\nfunction schematicsTracker()\r\n\r\n    -- Keep ID as it is which if first number\r\n    -- Second number defines amount you want to have\r\n    -- Third value is optional, set it to true if you want it to be prioritized, set it to false for low priority\r\n    -- keeping last value empty will make schematic normal priority\r\n\r\n    setTier(1)\r\n    -- Tier 1 Product Material\r\n    addSchematic(690638651, 6000, true)\r\n    -- Tier 1 XS Element\r\n    addSchematic(1910482623, 50)\r\n    -- Tier 1 S Element\r\n    addSchematic(4148773283, 50)\r\n    -- Tier 1 M Element\r\n    addSchematic(2066101218, 50)\r\n    -- Tier 1 L Element\r\n    addSchematic(2068774589, 100)\r\n    -- Tier 1 XL Element\r\n    addSchematic(304578197, 50)\r\n    -- Tier 1 Honeycomb\r\n    addSchematic(2479827059, 500)\r\n\r\n    setTier(2)\r\n    -- Tier 2 Product Material\r\n    addSchematic(4073976374, 4000, true)\r\n    -- Tier 2 Pure Material\r\n    addSchematic(3332597852, 4000, true)\r\n    -- Tier 2 XS Element\r\n    addSchematic(2096799848, 40)\r\n    -- Tier 2 S Element\r\n    addSchematic(1752968727, 40)\r\n    -- Tier 2 M Element\r\n    addSchematic(2726927301, 40)\r\n    -- Tier 2 L Element\r\n    addSchematic(616601802, 60)\r\n    -- Tier 2 XL Element\r\n    addSchematic(3677281424, 40)\r\n    -- Tier 2 Honeycomb\r\n    addSchematic(632722426, 500)\r\n    -- Tier 2 Honeycomb\r\n    addSchematic(625377458, 500)\r\n\r\n    setTier(3)\r\n    -- Tier 3 Product Material\r\n    addSchematic(3707339625, 1000, true)\r\n    -- Tier 3 Pure Material\r\n    addSchematic(2003602752, 1000, true)\r\n    -- Tier 3 XS Element\r\n    addSchematic(787727253, 30)\r\n    -- Tier 3 S Element\r\n    addSchematic(425872842, 30)\r\n    -- Tier 3 M Element\r\n    addSchematic(3713463144, 30)\r\n    -- Tier 3 L Element\r\n    addSchematic(1427639881, 30)\r\n    -- Tier 3 XL Element\r\n    addSchematic(109515712, 30)\r\n    -- Tier 3 Honeycomb\r\n    addSchematic(2343247971, 500)\r\n    -- Tier 3 Honeycomb\r\n    addSchematic(4221430495, 500)\r\n\r\n    setTier(4)\r\n    -- Tier 4 Product Material\r\n    addSchematic(2485530515, 500, true)\r\n    -- Tier 4 Pure Material\r\n    addSchematic(2326433413, 500, true)\r\n    -- Tier 4 XS Element\r\n    addSchematic(210052275, 30)\r\n    -- Tier 4 S Element\r\n    addSchematic(3890840920, 30)\r\n    -- Tier 4 M Element\r\n    addSchematic(3881438643, 30)\r\n    -- Tier 4 L Element\r\n    addSchematic(1614573474, 30)\r\n    -- Tier 4 XL Element\r\n    addSchematic(1974208697, 30)\r\n    -- Tier 4 Honeycomb\r\n    addSchematic(3743434922, 500)\r\n    -- Tier 4 Honeycomb\r\n    addSchematic(99491659, 500)\r\n\r\n    moveToNextScreen()\r\n    setTier(5)\r\n\r\n    -- Tier 5 Product Material\r\n    addSchematic(2752973532, 500)\r\n    -- Tier 5 Pure Material\r\n    addSchematic(1681671893, 500, true)\r\n    -- Tier 5 XS Element\r\n    addSchematic(1513927457, 30)\r\n    -- Tier 5 S Element\r\n    addSchematic(880043901, 30)\r\n    -- Tier 5 M Element\r\n    addSchematic(3672319913, 30)\r\n    -- Tier 5 L Element\r\n    addSchematic(86717297, 30)\r\n    -- Tier 5 XL Element\r\n    addSchematic(1320378000, 30)\r\n    -- Tier 5 Honeycomb\r\n    addSchematic(1885016266, 500)\r\n    -- Tier 5 Honeycomb\r\n    addSchematic(3303272691, 500)\r\n\r\n    setTier(6)\r\n    -- Construct Support XS\r\n    addSchematic(1477134528, 100, true)\r\n    -- Construct Support S\r\n    addSchematic(1224468838, 100, true)\r\n    -- Construct Support M\r\n    addSchematic(1861676811, 200, true)\r\n    -- Construct Support L\r\n    addSchematic(784932973, 200, true)\r\n    \r\n    setTier(7)\r\n    -- Core Unit xs\r\n    addSchematic(120427296, 10)\r\n    -- Core Unit s\r\n    addSchematic(1213081642, 10)\r\n    -- Core Unit M\r\n    addSchematic(1417495315, 20)\r\n    -- Core Unit L\r\n    addSchematic(1202149588, 20)\r\n\r\n    setTier(8)\r\n    -- Bonsai\r\n    addSchematic(674258992, 1, false)\r\n    -- Territory Unit\r\n    addSchematic(318308564, 7)\r\n    -- Warp Beacon\r\n    addSchematic(3437488324, 1, false)\r\n\r\n    setTier(9)\r\n    -- Atmo Fuel\r\n    addSchematic(3077761447, 5000, true)\r\n    -- Rocket Fuel\r\n    addSchematic(3992802706, 2000, false)\r\n    -- Space Fuel\r\n    addSchematic(1917988879, 5000, true)\r\n    -- Warp cells\r\n    addSchematic(363077945, 5000)\r\n    \r\n    setTier(10)\r\n    -- Tier 2 Scrap\r\n    addSchematic(1952035274, 1000)\r\n    -- Tier 3 Scrap\r\n    addSchematic(2566982373, 1000)\r\n    -- Tier 4 Scrap\r\n    addSchematic(1045229911, 1000, true)\r\n    -- Tier 5 Scrap\r\n    addSchematic(2702634486, 1000, true)\r\n\r\n    moveToNextScreen()\r\n    setTier(11)\r\n    -- Tier 2 XS Ammo\r\n    addSchematic(326757369, 1000, false)\r\n    -- Tier 2 S Ammo\r\n    addSchematic(3336558558, 1000, false)\r\n    -- Tier 2 M Ammo\r\n    addSchematic(399761377, 1000, false)\r\n    -- Tier 2 L Ammo\r\n    addSchematic(512435856, 1000, false)\r\n        \r\n    setTier(12)\r\n    -- Tier 3 XS Ammo\r\n    addSchematic(2413250793, 1000, false)\r\n    -- Tier 3 S Ammo\r\n    addSchematic(1705420479, 1000, false)\r\n    -- Tier 3 M Ammo\r\n    addSchematic(3125069948, 1000, false)\r\n    -- Tier 3 L Ammo\r\n    addSchematic(2913149958, 1000, false)\r\n    \r\n    setTier(13)   \r\n    -- Tier 4 XS Ammo\r\n    addSchematic(2293088862, 1000, false)\r\n    -- Tier 4 S Ammo\r\n    addSchematic(3636126848, 1000, false)\r\n    -- Tier 4 M Ammo\r\n    addSchematic(3847207511, 1000, false)\r\n    -- Tier 4 L Ammo\r\n    addSchematic(2557110259, 1000, false)\r\nend\r\n\r\nschematicsTracker()\r\n\r\nif not checkSchematicsContainer then\r\n    linkedToSchemContainer = true\r\nend\r\n\r\nunit.hideWidget()\r\n\r\nfunction updateScreens()\r\n    local serialized = {}\r\n    for id, info in ipairs(information) do\r\n        serialized[id] = serialize(info)\r\n    end\r\n\r\n    for id, screenObject in ipairs(screens) do\r\n\r\n        local horizontal = false\r\n        local inverted = false\r\n        local script = serialized[screenObject.sn]\r\n\r\n        if screenObject.dir == \"hu\" or screenObject.dir == \"hd\" then\r\n            horizontal = true\r\n            if screenObject.dir == \"hd\" then\r\n                inverted = true\r\n            end\r\n            script = serialize(information)\r\n        elseif  screenObject.dir == \"vr\" then\r\n            inverted = true\r\n        end\r\n\r\n        screenObject.screen.setRenderScript(formatScript(script, horizontal, inverted))\r\n    end\r\nend\r\n\r\nfunction generateItemUpdate()\r\n    local map = container.getContent()\r\n    tempInfo = {}\r\n    for _, i in ipairs(map) do\r\n        local schem = getExistingSchematic(i.id)\r\n        if schem ~= nil then\r\n            local item = system.getItem(i.id)\r\n            local existingId, existingItem = getExisting(item.id)\r\n            if existingItem == nil then\r\n                tempInfo[#tempInfo + 1] = { id = item.id, name = item.displayName:gsub(\"Schematic Copy\", \"\"), volume = mfloor(i.quantity), max = schem.max, tier = item.tier, p = schem.priority }\r\n            else\r\n                existingItem.volume = mfloor(existingItem.volume + i.quantity)\r\n                tempInfo[existingId] = existingItem\r\n            end\r\n        end\r\n    end\r\n    return tempInfo\r\nend\r\n\r\nfunction getExisting(id)\r\n    for i, item in ipairs(tempInfo) do\r\n        if item.id == id then\r\n            return i, item\r\n        end\r\n    end\r\n    return -1, nil\r\nend\r\n\r\nfunction getExistingSchematic(id)\r\n    for i, item in ipairs(schematics) do\r\n        if item.id == id then\r\n            return item\r\n        end\r\n    end\r\n    return nil\r\nend\r\n\r\nfunction fillMissing()\r\n    \r\n    information = {}\r\n    for id, schematic in ipairs(schematics) do\r\n        local id, existing = getExisting(schematic.id)\r\n        local temp = information[schematic.sn] or {}\r\n        if not existing then\r\n            temp[#temp + 1] = { name = schematic.name, volume = 0, max = schematic.max, tier = schematic.tier, p = schematic.priority }\r\n        else\r\n            temp[#temp + 1] = { name = schematic.name, volume = existing.volume, max = schematic.max, tier = schematic.tier, p = schematic.priority }\r\n        end\r\n        information[schematic.sn] = temp\r\n    end\r\n    return information\r\nend\r\n\r\nfunction containerContentUpdate()\r\n    lastRequest = system.getArkTime()\r\n    requestingUpdateContent = false\r\n    generateItemUpdate()\r\n    fillMissing()\r\n    updateScreens()\r\nend\r\n\r\nlocal init = false\r\n\r\nfunction update()\r\n    requestingUpdateContent = true\r\n    container.updateContent()\r\n\r\n    if not init then\r\n        local map = container.getContent()\r\n        if map and #map > 0 then\r\n            generateItemUpdate()\r\n            fillMissing()\r\n            updateScreens()\r\n        end\r\n        init = true\r\n    end\r\nend\r\n\r\nupdate()\r\n\r\nunit.setTimer('update', 1)","filter":{"args":[],"signature":"onStart()","slotKey":"-1"},"key":"0"},{"code":"containerContentUpdate()","filter":{"args":[],"signature":"onContentUpdate()","slotKey":"0"},"key":"0"}],"methods":[],"slots":{"0":{"name":"Container","type":{"events":[],"methods":[]}},"1":{"name":"slot2","type":{"events":[],"methods":[]}},"2":{"name":"slot3","type":{"events":[],"methods":[]}},"3":{"name":"slot4","type":{"events":[],"methods":[]}},"4":{"name":"slot5","type":{"events":[],"methods":[]}},"5":{"name":"slot6","type":{"events":[],"methods":[]}},"6":{"name":"slot7","type":{"events":[],"methods":[]}},"7":{"name":"slot8","type":{"events":[],"methods":[]}},"8":{"name":"slot9","type":{"events":[],"methods":[]}},"9":{"name":"slot10","type":{"events":[],"methods":[]}},"-5":{"name":"library","type":{"events":[],"methods":[]}},"-4":{"name":"system","type":{"events":[],"methods":[]}},"-3":{"name":"player","type":{"events":[],"methods":[]}},"-2":{"name":"construct","type":{"events":[],"methods":[]}},"-1":{"name":"unit","type":{"events":[],"methods":[]}}}}